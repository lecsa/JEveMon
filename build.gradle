def databaseDir = new File("database");
def imgDir = new File("img");
def scriptsDir = new File("scripts");
def archivesBaseName = 'perec'

allprojects {
    apply plugin: 'idea';

    ext.jUnitVersion = "4.+";
    ext.sqliteVersion = "3.7.2";
    ext.slf4jVersion = "1.7.5";
    ext.logbackVersion = "1.0.13";
    ext.databaseFolder = new File('database')
    ext.imgFolder = new File('img');
    
    repositories {
        flatDir { dirs "lib" }
        mavenCentral();
    }

    task initDirs() << {
        project.sourceSets*.allSource.srcDirs.flatten().each { dir ->
            dir.mkdirs()
        }
    }

}
project("JEveMon") {
    apply plugin: 'java';

    configurations {
    }

    dependencies {
        compile "org.xerial:sqlite-jdbc:$sqliteVersion";
        compile "org.slf4j:slf4j-api:$slf4jVersion";
        runtime "ch.qos.logback:logback-classic:$logbackVersion";
        testCompile "junit:junit:$jUnitVersion";
    }

    jar {
        def manifestClasspath = configurations.runtime.collect { File file -> "libs/" + file.name }.join(' ');
        def mainClassName = "UI.MainFrame";
        manifest {
            attributes(
                    "Main-Class": mainClassName,
                    "Class-Path": manifestClasspath,
                    "Version": mainClassName
            )
        };
    }

    task distZip(type: Zip) {
        dependsOn jar;
        from "$buildDir/libs";
        from "$buildDir/scripts";
        from "$buildDir/img";
        into('libs') {
            from configurations.runtime;
        }
        into('database') {
            from databaseDir;
        }
        into('img') {
            from imgDir;
        }
    }

    task buildScripts(type: Copy) {
        from scriptsDir;
        into("$buildDir/scripts");
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [jarName: jar.archiveName])
    }

    task dist {
        dependsOn distZip, buildScripts;
    }
}


